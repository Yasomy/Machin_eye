import cv2
import time
import torch
from ultralytics import YOLO

# URL –ø–æ—Ç–æ–∫–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π `m3u8`, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è)
stream_url = "http://46.191.199.9/1660720512DSH176/tracks-v1/index.fmp4.m3u8?token=3e32d84f2f7a4650a7bf9a54c9745605"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ GPU
device = "cuda" if torch.cuda.is_available() else "cpu"
print(f"üîπ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.upper()}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º YOLO –Ω–∞ GPU (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
model = YOLO("yolo11n.pt").to(device)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫
cap = cv2.VideoCapture(stream_url)

if not cap.isOpened():
    print("‚ùå –û—à–∏–±–∫–∞: OpenCV –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ç–æ–∫!")
    exit()

# –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–¥—Ä–∞
if width == 0 or height == 0:
    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ!")
    exit()

# –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è YOLO (–∫—Ä–∞—Ç–Ω—ã–π 32)
input_size = 1024

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ
fourcc = cv2.VideoWriter_fourcc(*"mp4v")
out = cv2.VideoWriter("output.mp4", fourcc, 30.0, (width, height))

prev_time = 0  # –í—Ä–µ–º—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è FPS

while cap.isOpened():
    ret, frame = cap.read()
    if not ret or frame is None:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä.")
        break

    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞ –¥–æ input_size x input_size –¥–ª—è YOLO
    resized_frame = cv2.resize(frame, (input_size, input_size))

    # YOLO –¥–µ–ª–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ GPU
    results = model(resized_frame)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ "Person" –∏ "Car")
    person_count = 0
    transport_count = 0
    filtered_boxes = []

    for box in results[0].boxes:
        cls = int(box.cls[0])
        if cls == 0:  # –ß–µ–ª–æ–≤–µ–∫
            person_count += 1
            filtered_boxes.append(box)
        elif cls == 2:  # –ú–∞—à–∏–Ω–∞
            transport_count += 1
            filtered_boxes.append(box)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–æ–∫—Å—ã –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º YOLO
    results[0].boxes = filtered_boxes

    # –ü—Ä–∏–≤–æ–¥–∏–º —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∫–∞–¥—Ä—É
    frame = results[0].plot()
    frame = cv2.resize(frame, (width, height))

    # –í—ã—á–∏—Å–ª—è–µ–º FPS
    curr_time = time.time()
    fps = 1 / (curr_time - prev_time) if prev_time else 0
    prev_time = curr_time

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    cv2.putText(frame, f"FPS: {int(fps)}", (20, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.putText(frame, f"People: {person_count}", (20, 80), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)
    cv2.putText(frame, f"Transport: {transport_count}", (20, 120), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 255), 2)

    # –ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ
    out.write(frame)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–∞–¥—Ä
    cv2.imshow("YOLO Stream (GPU)", frame)

    # –í—ã—Ö–æ–¥ –ø–æ "q"
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
out.release()
cv2.destroyAllWindows()
